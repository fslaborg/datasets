[{"uri":"/datasets/01_iris.html","title":"Iris","content":"(**\n---\ntitle: Iris\ncategory: Datasets\ncategoryindex: 1\nindex: 1\n---\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# The _Iris_ dataset\n\n**Table of contents**\n\n- [Description]()\n- [How to use]()\n- [Examples]()\n\n## Description\n\nWIP\n\n## How to use\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\n\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/iris.csv\u0022\nlet df = Frame.ReadCsvString(rawData) //exact settings may differ here depending on e.g. the separator used in the individual dataset\n\ndf.Print()\n\n(*** include-output ***)\n\n(**\n\n## Examples\n\nWIP\n\n*)"},{"uri":"/datasets/03_CaffeineAndEndurance.html","title":"Caffeine and Endurance","content":"(**\n---\ntitle: Caffeine and Endurance\ncategory: Datasets\ncategoryindex: 1\nindex: 3\n---\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# The _Caffeine and Endurance_ dataset\n\n**Table of contents**\n\n- [Description]()\n- [How to use]()\n- [Examples]()\n\n## Description\n\nEndurance times for 9 well-trained cyclists, on each of 4 doses of caffeine (0, 5, 9, 13 mg) with 1 line per subject.  \nTaken from [Lawrence H. Winner, University of Florida](http://archived.stat.ufl.edu/personnel/usrpages/winner.shtml):  \n- [Data](http://users.stat.ufl.edu/~winner/data/caffeine1.dat)  \n- [Description](http://users.stat.ufl.edu/~winner/data/caffeine1.txt)\n\nOriginal literature: W.J. Pasman, M.A. van Baak, A.E. Jeukendrup, A. de Haan (1995). \u0022The Effect of Different Dosages of Caffeine on Endurance Performance Time\u0022, International Journal of Sports Medicine, Vol. 16, pp225-230.\n\n\n## How to use\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\nopen System.Text.RegularExpressions\n\nlet rawDataCaffeine = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/CaffeineAndEndurance(wide).dat\u0022\n// This data format features a char column-wise structure. To transform it into a seperator-delimited format, we have to replace the multiple spaces via Regex:\nlet regexCaffeine = [Regex(\u0022[ ]{2,}1\u0022), \u00221\u0022; Regex(\u0022[ ]{2,}\u0022), \u0022\\t\u0022; Regex(\u0022\\n\\t\u0022), \u0022\\n\u0022]\nlet rawDataCaffeineAdapted = \n    regexCaffeine\n    |\u003E List.fold (fun acc (reg,rep) -\u003E reg.Replace(acc, rep)) rawDataCaffeine\n\nlet df = Frame.ReadCsvString(rawDataCaffeineAdapted, hasHeaders = false, separators = \u0022\\t\u0022, schema = \u0022Subject ID, no Dose, 5 mg, 9 mg, 13 mg\u0022)\n\n// Otherwise, the following already adapted dataset can be used:\nlet rawData2 = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/CaffeineAndEndurance(wide)_adapted.tsv\u0022\n\nlet df2 = Frame.ReadCsvString(rawData2, hasHeaders = false, separators = \u0022\\t\u0022, schema = \u0022Subject ID, no Dose, 5 mg, 9 mg, 13 mg\u0022)\n\ndf2.Print()\n\n(*** include-output ***)\n\n(**\n\n## Examples\n\nThis example is taken from the FsLab datascience tutorial [t-test]()\n(WIP)\n\n*)\n\n#r \u0022nuget: FSharp.Stats, 0.4.2\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.6\u0022\n\nopen FSharp.Stats\nopen FSharp.Stats.Testing\nopen Plotly.NET\n\n// We want to compare the subjects\u0027 performances under the influence of 13 mg caffeine and in the control situation.\nlet dataCaffeineNoDose, dataCaffeine13mg =\n    let getVectorFromCol col = \n        df2\n        |\u003E Frame.getCol col\n        |\u003E Series.values\n        |\u003E vector\n    getVectorFromCol \u0022no Dose\u0022, getVectorFromCol \u002213 mg\u0022\n\n// Transforming our data into a chart.\nlet visualizePairedData = \n    Seq.zip dataCaffeineNoDose dataCaffeine13mg\n    |\u003E Seq.mapi (fun i (control,treatment) -\u003E \n        let participant = \u0022Person \u0022 \u002B string (i \u002B 1)\n        Chart.Line([\u0022no dose\u0022, control; \u002213 mg\u0022, treatment], Name = participant)\n        )\n    |\u003E Chart.Combine\n    |\u003E Chart.withX_AxisStyle \u0022\u0022\n    |\u003E Chart.withY_AxisStyle(\u0022endurance performance\u0022, MinMax = (0.,100.))\n\n\n(*** condition: ipynb ***)\n#if IPYNB\nvisualizePairedData\n#endif // IPYNB\n\n(***hide***)\nvisualizePairedData |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nlet twoSamplePairedResult = TTest.twoSamplePaired dataCaffeineNoDose dataCaffeine13mg\n\n(*** include-value:twoSamplePairedResult ***)"},{"uri":"/datasets/05_InSilicoGeneExpression.html","title":"In silico gene expression","content":"(**\n---\ntitle: In silico gene expression\ncategory: Datasets\ncategoryindex: 1\nindex: 5\n---\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# The _in silico gene expression_ dataset\n\n**Table of contents**\n\n- [Description]()\n- [How to use]()\n- [Examples]()\n\n## Description\n\nThis is an in-silico data. It emulates the expression of 100 genes over 3 conditions, with 3 replicates each. It is made so that replicates are more similar to each other.\n\n7% of the values are dropped, as the dataset was originally made to showcase missing value imputation.\n\n## How to use\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\n\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/InSilicoGeneExpression.csv\u0022\n\nlet df : Frame\u003Cstring,string\u003E = \n    Frame.ReadCsvString(rawData)\n    |\u003E Frame.indexRows \u0022Key\u0022 //exact settings may differ here depending on e.g. the separator used in the individual dataset\n\ndf.Print()\n\n(*** include-output ***)\n\n(**\n\n## Examples\n\nCompute a correlation matrix between the genes after imputing the missing values\n\n*)\n\n#r \u0022nuget: FSharp.Stats, 0.4.2\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.6\u0022\n\nopen FSharp.Stats\nopen FSharp.Stats.ML\nopen Plotly.NET\n\n// Select the imputation method: kNearestImpute where the 2 nearest observations are considered\nlet kn : Impute.MatrixBaseImputation\u003Cfloat[],float\u003E = Impute.kNearestImpute 2\n\n// Impute the missing values using the \u0022imputeBy\u0022 function. The values of the deedle frame are first transformed into the input type of this function.\nlet imputedData = \n    df \n    |\u003E Frame.toJaggedArray \n    |\u003E Impute.imputeBy kn Ops.isNan\n    |\u003E Matrix.ofJaggedSeq\n\n// Perform a row-wise pearson correlation on the matrix, resulting in a correlation matrix\nlet correlationMatrix = Correlation.Matrix.rowWisePearson imputedData\n\n// Create a plotly heatmap from the correlation matrix\nlet correlationHeatmap = \n    correlationMatrix\n    |\u003E Matrix.toJaggedArray\n    |\u003E Chart.Heatmap\n\n(*** condition: ipynb ***)\n#if IPYNB\ncorrelationHeatmap\n#endif // IPYNB\n\n(***hide***)\ncorrelationHeatmap |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"},{"uri":"/datasets/02_ConcussionsInMaleAndFemaleCollegeAthletes.html","title":"Concussions in Male and Female College Athletes","content":"(**\n---\ntitle: Concussions in Male and Female College Athletes\ncategory: Datasets\ncategoryindex: 1\nindex: 2\n---\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# The _Concussions in Male and Female College Athletes_ dataset\n\n**Table of contents**\n\n- [Description]()\n- [How to use]()\n- [Examples]()\n\n## Description\n\nCounts of Concussions among collegiate athletes in 5 sports for 3 years by gender.  \nTaken from [Lawrence H. Winner, University of Florida](http://archived.stat.ufl.edu/personnel/usrpages/winner.shtml):  \n- [Data](http://users.stat.ufl.edu/~winner/data/concussion.dat)  \n- [Description](http://users.stat.ufl.edu/~winner/data/concussion.txt)\n\nOriginal literature: T. Covassin, C.B. Swanik, M.L. Sachs (2003). \u0022Sex Differences and the Incidence of Concussions Among Collegiate Athletes\u0022, Journal of Athletic Training, Vol. (38)3, pp238-244\n\n\n## How to use\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\nopen System.Text.RegularExpressions\n\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/ConcussionsInMaleAndFemaleCollegeAthletes.dat\u0022\n\n// This data format features a char column-wise structure. To transform it into a seperator-delimited format, we have to replace the multiple spaces via Regex:\nlet regex = Regex(\u0022[ ]{2,}\u0022)\nlet rawDataAdapted = regex.Replace(rawData, \u0022\\t\u0022)\n\nlet df = Frame.ReadCsvString(rawDataAdapted, hasHeaders = false, separators = \u0022\\t\u0022, schema = \u0022Gender, Sports, Year, Concussion, Count\u0022)\n\n// Otherwise, the following already adapted dataset can be used:\nlet rawData2 = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/ConcussionsInMaleAndFemaleCollegeAthletes_adapted.tsv\u0022\n\nlet df2 = Frame.ReadCsvString(rawData2, hasHeaders = false, separators = \u0022\\t\u0022, schema = \u0022Gender, Sports, Year, Concussion, Count\u0022)\n\ndf2.Print()\n\n(*** include-output ***)\n\n(**\n\n## Examples\n\nThis example is taken from the FsLab datascience tutorial [t-test]()\n(WIP)\n\n*)\n\n#r \u0022nuget: FSharp.Stats, 0.4.2\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.6\u0022\n\nopen FSharp.Stats\nopen FSharp.Stats.Testing\nopen Plotly.NET\n\n// We need to filter out the columns and rows we don\u0027t need. Thus, we filter out the rows where the athletes suffered no concussions as well as filter out the columns without the number of concussions.\nlet dataAthletesFemale, dataAthletesMale =\n    let getAthleteGenderData gender =\n        let dataAthletesOnlyConcussion =\n            df2\n            |\u003E Frame.filterRows (fun r objS -\u003E objS.GetAs \u0022Concussion\u0022)\n        let dataAthletesGenderFrame =\n            dataAthletesOnlyConcussion\n            |\u003E Frame.filterRows (fun r objS -\u003E objS.GetAs \u0022Gender\u0022 = gender)\n        dataAthletesGenderFrame\n        |\u003E Frame.getCol \u0022Count\u0022 \n        |\u003E Series.values\n        |\u003E vector\n    getAthleteGenderData \u0022Female\u0022, getAthleteGenderData \u0022Male\u0022\n\nlet boxPlot = \n    [\n        Chart.BoxPlot(y = dataAthletesFemale, Name = \u0022female college athletes\u0022, Boxpoints = StyleParam.Boxpoints.All, Jitter = 0.2)\n        Chart.BoxPlot(y = dataAthletesMale, Name = \u0022male college athletes\u0022, Boxpoints = StyleParam.Boxpoints.All, Jitter = 0.2)\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withY_AxisStyle \u0022number of concussions over 3 years\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nboxPlot\n#endif // IPYNB\n\n(***hide***)\nboxPlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\nopen FSharp.Stats.Testing\n\n// We test both samples against each other, assuming equal variances.\nlet twoSampleResult = TTest.twoSample true dataAthletesFemale dataAthletesMale\n\n(*** include-value:twoSampleResult ***)"},{"uri":"/datasets/04_HouseflyWingLength.html","title":"Housefly Wing Length","content":"(**\n---\ntitle: Housefly Wing Length\ncategory: Datasets\ncategoryindex: 1\nindex: 4\n---\n\n[![Binder]({{root}}img/badge-binder.svg)](https://mybinder.org/v2/gh/plotly/Plotly.NET/gh-pages?filepath={{fsdocs-source-basename}}.ipynb)\u0026emsp;\n[![Script]({{root}}img/badge-script.svg)]({{root}}{{fsdocs-source-basename}}.fsx)\u0026emsp;\n[![Notebook]({{root}}img/badge-notebook.svg)]({{root}}{{fsdocs-source-basename}}.ipynb)\n\n# The _Housefly Wing Length_ dataset\n\n**Table of contents**\n\n- [Description]()\n- [How to use]()\n- [Examples]()\n\n## Description\n\nMeasured wing lengths of 100 houseflies in mm * 10^1.  \nTaken from https://seattlecentral.edu/qelp/sets/057/057.html\n\nOriginal literature: Sokal, R.R. and P.E. Hunter. 1955. \u0022A morphometric analysis of DDT-resistant and non-resistant housefly strains\u0022 Ann. Entomol. Soc. Amer. 48: 499-507.\n\n\n## How to use\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\n\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/HouseflyWingLength.txt\u0022\n\nlet df = Frame.ReadCsvString(rawData, hasHeaders = false, schema = \u0022wing length (mm * 10^1)\u0022)\n\ndf.Print()\n\n(*** include-output ***)\n\n(**\n\n## Examples\n\nThis example is taken from the FsLab datascience tutorial [t-test]()\n(WIP)\n\n*)\n\n#r \u0022nuget: FSharp.Stats, 0.4.2\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-preview.6\u0022\n\nopen FSharp.Stats\nopen FSharp.Stats.Testing\nopen Plotly.NET\n\nlet seqDataHousefly =\n    df\n    |\u003E Frame.getCol \u0022wing length (mm * 10^1)\u0022\n    |\u003E Series.values\n    // We convert the values to mm\n    |\u003E Seq.map (fun x -\u003E x / 10.)\n\nlet boxPlot = \n    Chart.BoxPlot(y = seqDataHousefly, Name = \u0022housefly\u0022, Boxpoints = StyleParam.Boxpoints.All, Jitter = 0.2)\n    |\u003E Chart.withY_AxisStyle \u0022wing length [mm]\u0022\n\n(*** condition: ipynb ***)\n#if IPYNB\nboxPlot\n#endif // IPYNB\n\n(***hide***)\nboxPlot |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n// The testing module in FSharp.Stats require vectors as input types, thus we transform our array into a vector:\nlet vectorDataHousefly = vector seqDataHousefly\n\n// The expected value of our population.\nlet expectedValue = 4.5\n\n// Perform the one-sample t-test with our vectorized data and our exptected value as parameters.\nlet oneSampleResult = TTest.oneSample vectorDataHousefly expectedValue\n\n(*** hide ***)\n\n(*** include-value:oneSampleResult ***)"},{"uri":"/datasets/index.html","title":"FsLab data sets\n","content":"(**\n\n# FsLab data sets\nA data source for example datasets for all kinds of data science.\n\nFor now, this repository just aims to aggregate some data sources that can be referenced by HTTP requests in a data science project. In the future, this ideally evolves to a proper nuget package that provides the data as dataframes directly.\nFor using the data contained in this repository, we recommend using \u0060FSharp.Data\u0060 in conjunction with \u0060Deedle\u0060, like this:\n\n*)\n\n#r \u0022nuget: FSharp.Data\u0022\n#r \u0022nuget: Deedle\u0022\n\nopen FSharp.Data\nopen Deedle\n\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/fslaborg/datasets/main/data/iris.csv\u0022\nlet df = Frame.ReadCsvString(rawData) //exact settings may differ here depending on e.g. the separator used in the individual dataset\n\ndf.Print()\n\n(***include-output***)"}]